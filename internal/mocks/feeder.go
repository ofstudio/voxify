// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/ofstudio/voxify/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFeeder creates a new instance of MockFeeder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeeder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeeder {
	mock := &MockFeeder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeeder is an autogenerated mock type for the Feeder type
type MockFeeder struct {
	mock.Mock
}

type MockFeeder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeeder) EXPECT() *MockFeeder_Expecter {
	return &MockFeeder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function for the type MockFeeder
func (_mock *MockFeeder) Build(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFeeder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockFeeder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFeeder_Expecter) Build(ctx interface{}) *MockFeeder_Build_Call {
	return &MockFeeder_Build_Call{Call: _e.mock.On("Build", ctx)}
}

func (_c *MockFeeder_Build_Call) Run(run func(ctx context.Context)) *MockFeeder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFeeder_Build_Call) Return(err error) *MockFeeder_Build_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFeeder_Build_Call) RunAndReturn(run func(ctx context.Context) error) *MockFeeder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// Feed provides a mock function for the type MockFeeder
func (_mock *MockFeeder) Feed(ctx context.Context) (*entities.Feed, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Feed")
	}

	var r0 *entities.Feed
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*entities.Feed, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *entities.Feed); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Feed)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeeder_Feed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Feed'
type MockFeeder_Feed_Call struct {
	*mock.Call
}

// Feed is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFeeder_Expecter) Feed(ctx interface{}) *MockFeeder_Feed_Call {
	return &MockFeeder_Feed_Call{Call: _e.mock.On("Feed", ctx)}
}

func (_c *MockFeeder_Feed_Call) Run(run func(ctx context.Context)) *MockFeeder_Feed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFeeder_Feed_Call) Return(feed *entities.Feed, err error) *MockFeeder_Feed_Call {
	_c.Call.Return(feed, err)
	return _c
}

func (_c *MockFeeder_Feed_Call) RunAndReturn(run func(ctx context.Context) (*entities.Feed, error)) *MockFeeder_Feed_Call {
	_c.Call.Return(run)
	return _c
}
