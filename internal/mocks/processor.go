// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/ofstudio/voxify/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProcessor creates a new instance of MockProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessor {
	mock := &MockProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProcessor is an autogenerated mock type for the Processor type
type MockProcessor struct {
	mock.Mock
}

type MockProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcessor) EXPECT() *MockProcessor_Expecter {
	return &MockProcessor_Expecter{mock: &_m.Mock}
}

// In provides a mock function for the type MockProcessor
func (_mock *MockProcessor) In() chan<- *entities.Request {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for In")
	}

	var r0 chan<- *entities.Request
	if returnFunc, ok := ret.Get(0).(func() chan<- *entities.Request); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- *entities.Request)
		}
	}
	return r0
}

// MockProcessor_In_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'In'
type MockProcessor_In_Call struct {
	*mock.Call
}

// In is a helper method to define mock.On call
func (_e *MockProcessor_Expecter) In() *MockProcessor_In_Call {
	return &MockProcessor_In_Call{Call: _e.mock.On("In")}
}

func (_c *MockProcessor_In_Call) Run(run func()) *MockProcessor_In_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProcessor_In_Call) Return(requestCh chan<- *entities.Request) *MockProcessor_In_Call {
	_c.Call.Return(requestCh)
	return _c
}

func (_c *MockProcessor_In_Call) RunAndReturn(run func() chan<- *entities.Request) *MockProcessor_In_Call {
	_c.Call.Return(run)
	return _c
}
