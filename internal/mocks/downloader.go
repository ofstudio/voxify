// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/ofstudio/voxify/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDownloader creates a new instance of MockDownloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDownloader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDownloader {
	mock := &MockDownloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDownloader is an autogenerated mock type for the Downloader type
type MockDownloader struct {
	mock.Mock
}

type MockDownloader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDownloader) EXPECT() *MockDownloader_Expecter {
	return &MockDownloader_Expecter{mock: &_m.Mock}
}

// Download provides a mock function for the type MockDownloader
func (_mock *MockDownloader) Download(ctx context.Context, req entities.Request) (*entities.Episode, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 *entities.Episode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Request) (*entities.Episode, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Request) *entities.Episode); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Episode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entities.Request) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDownloader_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockDownloader_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.Request
func (_e *MockDownloader_Expecter) Download(ctx interface{}, req interface{}) *MockDownloader_Download_Call {
	return &MockDownloader_Download_Call{Call: _e.mock.On("Download", ctx, req)}
}

func (_c *MockDownloader_Download_Call) Run(run func(ctx context.Context, req entities.Request)) *MockDownloader_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 entities.Request
		if args[1] != nil {
			arg1 = args[1].(entities.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDownloader_Download_Call) Return(episode *entities.Episode, err error) *MockDownloader_Download_Call {
	_c.Call.Return(episode, err)
	return _c
}

func (_c *MockDownloader_Download_Call) RunAndReturn(run func(ctx context.Context, req entities.Request) (*entities.Episode, error)) *MockDownloader_Download_Call {
	_c.Call.Return(run)
	return _c
}
