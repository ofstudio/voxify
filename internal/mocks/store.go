// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/ofstudio/voxify/internal/entities"
	"github.com/ofstudio/voxify/internal/store"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function for the type MockStore
func (_mock *MockStore) Begin(ctx context.Context) (store.Store, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 store.Store
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (store.Store, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) store.Store); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Store)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockStore_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) Begin(ctx interface{}) *MockStore_Begin_Call {
	return &MockStore_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *MockStore_Begin_Call) Run(run func(ctx context.Context)) *MockStore_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStore_Begin_Call) Return(store1 store.Store, err error) *MockStore_Begin_Call {
	_c.Call.Return(store1, err)
	return _c
}

func (_c *MockStore_Begin_Call) RunAndReturn(run func(ctx context.Context) (store.Store, error)) *MockStore_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockStore
func (_mock *MockStore) Close() {
	_mock.Called()
	return
}

// MockStore_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStore_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStore_Expecter) Close() *MockStore_Close_Call {
	return &MockStore_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStore_Close_Call) Run(run func()) *MockStore_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_Close_Call) Return() *MockStore_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStore_Close_Call) RunAndReturn(run func()) *MockStore_Close_Call {
	_c.Run(run)
	return _c
}

// Commit provides a mock function for the type MockStore
func (_mock *MockStore) Commit() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockStore_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *MockStore_Expecter) Commit() *MockStore_Commit_Call {
	return &MockStore_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *MockStore_Commit_Call) Run(run func()) *MockStore_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_Commit_Call) Return(err error) *MockStore_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_Commit_Call) RunAndReturn(run func() error) *MockStore_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// EpisodeCreate provides a mock function for the type MockStore
func (_mock *MockStore) EpisodeCreate(ctx context.Context, episode *entities.Episode) error {
	ret := _mock.Called(ctx, episode)

	if len(ret) == 0 {
		panic("no return value specified for EpisodeCreate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Episode) error); ok {
		r0 = returnFunc(ctx, episode)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_EpisodeCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpisodeCreate'
type MockStore_EpisodeCreate_Call struct {
	*mock.Call
}

// EpisodeCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - episode *entities.Episode
func (_e *MockStore_Expecter) EpisodeCreate(ctx interface{}, episode interface{}) *MockStore_EpisodeCreate_Call {
	return &MockStore_EpisodeCreate_Call{Call: _e.mock.On("EpisodeCreate", ctx, episode)}
}

func (_c *MockStore_EpisodeCreate_Call) Run(run func(ctx context.Context, episode *entities.Episode)) *MockStore_EpisodeCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entities.Episode
		if args[1] != nil {
			arg1 = args[1].(*entities.Episode)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_EpisodeCreate_Call) Return(err error) *MockStore_EpisodeCreate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_EpisodeCreate_Call) RunAndReturn(run func(ctx context.Context, episode *entities.Episode) error) *MockStore_EpisodeCreate_Call {
	_c.Call.Return(run)
	return _c
}

// EpisodeGetByOriginalUrl provides a mock function for the type MockStore
func (_mock *MockStore) EpisodeGetByOriginalUrl(ctx context.Context, url string) ([]*entities.Episode, error) {
	ret := _mock.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for EpisodeGetByOriginalUrl")
	}

	var r0 []*entities.Episode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*entities.Episode, error)); ok {
		return returnFunc(ctx, url)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*entities.Episode); ok {
		r0 = returnFunc(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Episode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, url)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_EpisodeGetByOriginalUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpisodeGetByOriginalUrl'
type MockStore_EpisodeGetByOriginalUrl_Call struct {
	*mock.Call
}

// EpisodeGetByOriginalUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
func (_e *MockStore_Expecter) EpisodeGetByOriginalUrl(ctx interface{}, url interface{}) *MockStore_EpisodeGetByOriginalUrl_Call {
	return &MockStore_EpisodeGetByOriginalUrl_Call{Call: _e.mock.On("EpisodeGetByOriginalUrl", ctx, url)}
}

func (_c *MockStore_EpisodeGetByOriginalUrl_Call) Run(run func(ctx context.Context, url string)) *MockStore_EpisodeGetByOriginalUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_EpisodeGetByOriginalUrl_Call) Return(episodes []*entities.Episode, err error) *MockStore_EpisodeGetByOriginalUrl_Call {
	_c.Call.Return(episodes, err)
	return _c
}

func (_c *MockStore_EpisodeGetByOriginalUrl_Call) RunAndReturn(run func(ctx context.Context, url string) ([]*entities.Episode, error)) *MockStore_EpisodeGetByOriginalUrl_Call {
	_c.Call.Return(run)
	return _c
}

// EpisodeListAll provides a mock function for the type MockStore
func (_mock *MockStore) EpisodeListAll(ctx context.Context) ([]*entities.Episode, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for EpisodeListAll")
	}

	var r0 []*entities.Episode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*entities.Episode, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*entities.Episode); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Episode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_EpisodeListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EpisodeListAll'
type MockStore_EpisodeListAll_Call struct {
	*mock.Call
}

// EpisodeListAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) EpisodeListAll(ctx interface{}) *MockStore_EpisodeListAll_Call {
	return &MockStore_EpisodeListAll_Call{Call: _e.mock.On("EpisodeListAll", ctx)}
}

func (_c *MockStore_EpisodeListAll_Call) Run(run func(ctx context.Context)) *MockStore_EpisodeListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStore_EpisodeListAll_Call) Return(episodes []*entities.Episode, err error) *MockStore_EpisodeListAll_Call {
	_c.Call.Return(episodes, err)
	return _c
}

func (_c *MockStore_EpisodeListAll_Call) RunAndReturn(run func(ctx context.Context) ([]*entities.Episode, error)) *MockStore_EpisodeListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessCountByUrlAndStatus provides a mock function for the type MockStore
func (_mock *MockStore) ProcessCountByUrlAndStatus(ctx context.Context, url string, status entities.Status) (int, error) {
	ret := _mock.Called(ctx, url, status)

	if len(ret) == 0 {
		panic("no return value specified for ProcessCountByUrlAndStatus")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, entities.Status) (int, error)); ok {
		return returnFunc(ctx, url, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, entities.Status) int); ok {
		r0 = returnFunc(ctx, url, status)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, entities.Status) error); ok {
		r1 = returnFunc(ctx, url, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_ProcessCountByUrlAndStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessCountByUrlAndStatus'
type MockStore_ProcessCountByUrlAndStatus_Call struct {
	*mock.Call
}

// ProcessCountByUrlAndStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - status entities.Status
func (_e *MockStore_Expecter) ProcessCountByUrlAndStatus(ctx interface{}, url interface{}, status interface{}) *MockStore_ProcessCountByUrlAndStatus_Call {
	return &MockStore_ProcessCountByUrlAndStatus_Call{Call: _e.mock.On("ProcessCountByUrlAndStatus", ctx, url, status)}
}

func (_c *MockStore_ProcessCountByUrlAndStatus_Call) Run(run func(ctx context.Context, url string, status entities.Status)) *MockStore_ProcessCountByUrlAndStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 entities.Status
		if args[2] != nil {
			arg2 = args[2].(entities.Status)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStore_ProcessCountByUrlAndStatus_Call) Return(n int, err error) *MockStore_ProcessCountByUrlAndStatus_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockStore_ProcessCountByUrlAndStatus_Call) RunAndReturn(run func(ctx context.Context, url string, status entities.Status) (int, error)) *MockStore_ProcessCountByUrlAndStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessGetByStatus provides a mock function for the type MockStore
func (_mock *MockStore) ProcessGetByStatus(ctx context.Context, status entities.Status) ([]*entities.Process, error) {
	ret := _mock.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for ProcessGetByStatus")
	}

	var r0 []*entities.Process
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Status) ([]*entities.Process, error)); ok {
		return returnFunc(ctx, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Status) []*entities.Process); ok {
		r0 = returnFunc(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Process)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entities.Status) error); ok {
		r1 = returnFunc(ctx, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_ProcessGetByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessGetByStatus'
type MockStore_ProcessGetByStatus_Call struct {
	*mock.Call
}

// ProcessGetByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status entities.Status
func (_e *MockStore_Expecter) ProcessGetByStatus(ctx interface{}, status interface{}) *MockStore_ProcessGetByStatus_Call {
	return &MockStore_ProcessGetByStatus_Call{Call: _e.mock.On("ProcessGetByStatus", ctx, status)}
}

func (_c *MockStore_ProcessGetByStatus_Call) Run(run func(ctx context.Context, status entities.Status)) *MockStore_ProcessGetByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 entities.Status
		if args[1] != nil {
			arg1 = args[1].(entities.Status)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_ProcessGetByStatus_Call) Return(processs []*entities.Process, err error) *MockStore_ProcessGetByStatus_Call {
	_c.Call.Return(processs, err)
	return _c
}

func (_c *MockStore_ProcessGetByStatus_Call) RunAndReturn(run func(ctx context.Context, status entities.Status) ([]*entities.Process, error)) *MockStore_ProcessGetByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessUpsert provides a mock function for the type MockStore
func (_mock *MockStore) ProcessUpsert(ctx context.Context, process *entities.Process) error {
	ret := _mock.Called(ctx, process)

	if len(ret) == 0 {
		panic("no return value specified for ProcessUpsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Process) error); ok {
		r0 = returnFunc(ctx, process)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_ProcessUpsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessUpsert'
type MockStore_ProcessUpsert_Call struct {
	*mock.Call
}

// ProcessUpsert is a helper method to define mock.On call
//   - ctx context.Context
//   - process *entities.Process
func (_e *MockStore_Expecter) ProcessUpsert(ctx interface{}, process interface{}) *MockStore_ProcessUpsert_Call {
	return &MockStore_ProcessUpsert_Call{Call: _e.mock.On("ProcessUpsert", ctx, process)}
}

func (_c *MockStore_ProcessUpsert_Call) Run(run func(ctx context.Context, process *entities.Process)) *MockStore_ProcessUpsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entities.Process
		if args[1] != nil {
			arg1 = args[1].(*entities.Process)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_ProcessUpsert_Call) Return(err error) *MockStore_ProcessUpsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_ProcessUpsert_Call) RunAndReturn(run func(ctx context.Context, process *entities.Process) error) *MockStore_ProcessUpsert_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type MockStore
func (_mock *MockStore) Rollback() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockStore_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *MockStore_Expecter) Rollback() *MockStore_Rollback_Call {
	return &MockStore_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *MockStore_Rollback_Call) Run(run func()) *MockStore_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_Rollback_Call) Return(err error) *MockStore_Rollback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_Rollback_Call) RunAndReturn(run func() error) *MockStore_Rollback_Call {
	_c.Call.Return(run)
	return _c
}
